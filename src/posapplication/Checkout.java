/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package posapplication;

import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author New
 */
public class Checkout extends javax.swing.JFrame {
    
    private static DefaultTableModel tableModel;
    private static double totalAmount;
    private static String cashierEmail;

    /**
     * Creates new form Checkout
     */
    public Checkout(DefaultTableModel tableModelCon,double totalAmountCon,String cashierEmailCon) {
        this.tableModel = tableModelCon;
        this.totalAmount = totalAmountCon;
        this.cashierEmail= cashierEmailCon;
        
        initComponents();
        initTotalAmount(totalAmountCon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("TOTAL AMOUNT");

        jLabel2.setText("CASH ");

        jLabel3.setText("BALACNCE");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText(" ");
        jTextField2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextField2PropertyChange(evt);
            }
        });

        jTextField3.setText("jTextField3");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("PURCHASE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("PRINT RECIEPT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initTotalAmount (double totalAmount){
        jTextField1.setText(String.valueOf(totalAmount));
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        PrinterJob pj = PrinterJob.getPrinterJob();        
        pj.setPrintable(new BillPrintable(),getPageFormat(pj));
        try {
             pj.print();
          
        }
         catch (PrinterException ex) {
                 ex.printStackTrace();
        }    // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //need to update stock in  the database      
        updateStockQuantityDB();
        
        // sales performance
        updateCashierSalesPerformance();
        
        //updateItemsSoldToDb;
        updateItemsSoldToDB();
           
        //stock performancedsdf
        updateStockPerformance();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextField2PropertyChange
       jTextField3.setText("a");
    }//GEN-LAST:event_jTextField2PropertyChange

    public PageFormat getPageFormat(PrinterJob pj){
    
    PageFormat pf = pj.defaultPage();
    Paper paper = pf.getPaper();    

    double bodyHeight = tableModel.getRowCount();//bHeight;  
    double headerHeight = 5.0;                  
    double footerHeight = 5.0;        
    double width = cm_to_pp(8); 
    double height = cm_to_pp(headerHeight+bodyHeight+footerHeight); 
    paper.setSize(width, height);
    paper.setImageableArea(0,10,width,height - cm_to_pp(1));  
            
    pf.setOrientation(PageFormat.PORTRAIT);  
    pf.setPaper(paper);    

    return pf;
}
    protected static double cm_to_pp(double cm){            
	return toPPI(cm * 0.393600787);            
    }
 
    protected static double toPPI(double inch){            
	return inch * 72d;            
    }
    
    
    public class BillPrintable implements Printable {
    
        public int print(Graphics graphics, PageFormat pageFormat,int pageIndex) throws PrinterException {    
      
      int r= tableModel.getRowCount();
      ImageIcon icon=new ImageIcon(""); 
      int result = NO_SUCH_PAGE;    
        if (pageIndex == 0) {                    
        
            Graphics2D g2d = (Graphics2D) graphics;                    
            double width = pageFormat.getImageableWidth();                               
            g2d.translate((int) pageFormat.getImageableX(),(int) pageFormat.getImageableY()); 



          //  FontMetrics metrics=g2d.getFontMetrics(new Font("Arial",Font.BOLD,7));
        
        try{
            int y=20;
            int yShift = 10;
            int headerRectHeight=15;
           // int headerRectHeighta=40;
            
                
            g2d.setFont(new Font("Monospaced",Font.PLAIN,9));
            g2d.drawImage(icon.getImage(), 50, 20, 90, 30, rootPane);y+=yShift+30;
            g2d.drawString("-------------------------------------",12,y);y+=yShift;
            g2d.drawString("         CodeGuid.com        ",12,y);y+=yShift;
            g2d.drawString("   No 00000 Address Line One ",12,y);y+=yShift;
            g2d.drawString("   Address Line 02 SRI LANKA ",12,y);y+=yShift;
            g2d.drawString("   www.facebook.com/CodeGuid ",12,y);y+=yShift;
            g2d.drawString("        +94700000000      ",12,y);y+=yShift;
            g2d.drawString("-------------------------------------",12,y);y+=headerRectHeight;

            g2d.drawString(" Item Name           Price   ",10,y);y+=yShift;
            g2d.drawString("-------------------------------------",10,y);y+=headerRectHeight;
     
            for(int s=0; s<r; s++){
                String productName = String.valueOf(tableModel.getValueAt(s, 0));
                int quantity = Integer.parseInt(String.valueOf(tableModel.getValueAt(s, 1)));
                double pricePerQuantity = Double.parseDouble(String.valueOf(tableModel.getValueAt(s, 2)));
                
                double totalPrice =quantity * pricePerQuantity;
                
                double totalAmount = 0.0;  // Declare and initialize totalAmount
                totalAmount += quantity * pricePerQuantity;
                System.out.println("The total amount: " + totalAmount);// Add the product of quantity and pricePerQuantity to totalAmount

                
                g2d.drawString(" "+productName+"                            ",10,y);y+=yShift;
                g2d.drawString("      "+quantity+" * "+pricePerQuantity,10,y); 
                g2d.drawString(""+totalPrice,160,y);y+=yShift;

            }
          
            g2d.drawString("-------------------------------------",10,y);y+=yShift;
            g2d.drawString(" Total amount:               "+jTextField1.getText()+"   ",10,y);y+=yShift;
            g2d.drawString("-------------------------------------",10,y);y+=yShift;
            g2d.drawString(" Cash      :                 "+jTextField2.getText()+"   ",10,y);y+=yShift;
            g2d.drawString("-------------------------------------",10,y);y+=yShift;
            g2d.drawString(" Balance   :                 "+jTextField3.getText()+"   ",10,y);y+=yShift;
  
            g2d.drawString("*************************************",10,y);y+=yShift;
            g2d.drawString("       THANK YOU COME AGAIN            ",10,y);y+=yShift;
            g2d.drawString("*************************************",10,y);y+=yShift;
            g2d.drawString("       SOFTWARE BY:CODEGUID          ",10,y);y+=yShift;
            g2d.drawString("   CONTACT: contact@codeguid.com       ",10,y);y+=yShift;       
           

    }
    catch(Exception e){
    e.printStackTrace();
    }

              result = PAGE_EXISTS;    
          }    
          return result;    
      }
   }
    private void updateStockPerformance(){
         String productName = "";
        int quantity = 0;
        int totalQuantitySold = 0;
        double pricePerQuantity = 0.0;
        double totalAmountSold = 0.0;
        
        int rowCount = tableModel.getRowCount();
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps = con.prepareStatement("insert into product_performance values (?,?,?)");
            PreparedStatement psUpdate = con.prepareStatement("UPDATE product_performance SET total_quantity_sold = total_quantity_sold + ?, total_amount_sold = total_amount_sold + ? WHERE product_name = ?");
            
            
            //get quantity and price
            for (int i = 0; i < rowCount; i++) {
                 productName = String.valueOf(tableModel.getValueAt(i, 0));
                 quantity = Integer.parseInt(String.valueOf(tableModel.getValueAt(i, 1)));
                 pricePerQuantity = Double.parseDouble(String.valueOf(tableModel.getValueAt(i, 2)));

                totalQuantitySold += quantity;
                totalAmountSold += quantity * pricePerQuantity;
                
                if(checkForProducts(productName)){
                    psUpdate.setInt(1, totalQuantitySold);
                    psUpdate.setDouble(2,totalAmountSold);
                    psUpdate.setString(3, productName);
                    
                    int rsUpdate = psUpdate.executeUpdate();
                     System.out.println("update product in product perfromance table");
                }else{
                     ps.setString(1, productName);
                    ps.setInt(2, totalQuantitySold);
                    ps.setDouble(3, totalAmountSold);
                //ps.setString(4, formattedDate);
            
                int rs = ps.executeUpdate();
                System.out.println("Inserted to product perfromance table");
                }
               
            }

            
           
        }catch(Exception e){
            System.out.println("Error: " + e);
        }
    }
    
    private void updateItemsSoldToDB(){
        String productName = "";
        int quantity = 0;
        double pricePerQuantity = 0.0;
        int rowCount = tableModel.getRowCount();
        try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps = con.prepareStatement("insert into product_sold values (?,?,?,?)");
            
            //get quantity and price
            for (int i = 0; i < rowCount; i++) {
                 productName = String.valueOf(tableModel.getValueAt(i, 0));
                 quantity = Integer.parseInt(String.valueOf(tableModel.getValueAt(i, 1)));
                 pricePerQuantity = Double.parseDouble(String.valueOf(tableModel.getValueAt(i, 2)));

               // totalQuantity += quantity;
               // totalAmount += quantity * pricePerQuantity;
               
                     // Get today's date
                LocalDate today = LocalDate.of(2022,2,8);

                // Format the date as dd/MM/yyyy
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String formattedDate = today.format(formatter);

                System.out.println("Today's date: " + formattedDate);
            
                ps.setString(1, productName);
                ps.setInt(2, quantity);
                ps.setDouble(3, pricePerQuantity);
                ps.setString(4, formattedDate);
            
                int rs = ps.executeUpdate();
                System.out.println("Inserted");
            }
            
        }catch(Exception e){
            System.out.println("Error: " + e);
        }
        
    }
    
   private void updateStockQuantityDB(){
       int rowCount = tableModel.getRowCount();

        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos", "root", "root");

            for (int i = 0; i < rowCount; i++) {
            String productName = String.valueOf(tableModel.getValueAt(i, 0));  
            int quantitySold = Integer.parseInt(String.valueOf(tableModel.getValueAt(i, 1))); 
       
        try (PreparedStatement updateStatement = connection.prepareStatement("UPDATE pau_products SET quantity = quantity - ? WHERE product_name = ?")) {
            updateStatement.setInt(1, quantitySold);
            updateStatement.setString(2, productName);
            updateStatement.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: " + e); // Handle the exception according to your needs
        }
    }

    
    } catch (Exception e) {
        System.out.println();  
    }

   }
   
   private void updateCashierSalesPerformance(){
        String firstName ="";
        String lastName= "";
        int rowCount = tableModel.getRowCount();

        int totalQuantity = 0;
        double totalAmount = 0.0;
        try{
            
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM pau_staff WHERE email_id = ?");  
            ps.setString(1,cashierEmail);
            ResultSet rs = ps.executeQuery();
            
            while(rs.next()){
                
                firstName = rs.getString("first_name");
                lastName = rs.getString("last_name");
            }
            
            
            
            System.out.println("cashier: " + checkForCashier());
            if(checkForCashier()){
                
                //update cashier performance
                 // Class.forName("com.mysql.cj.jdbc.Driver");
           // Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","Hearty.2010")    ;
            System.out.println("Connected");
            PreparedStatement psUpdate = con.prepareStatement("UPDATE cashier_performance SET quantity_sold = quantity_sold + ?, total_amount = total_amount + ? WHERE cashier_email = ?");
            //get quantity and price
            for (int i = 0; i < rowCount; i++) {
                int quantity = Integer.parseInt(String.valueOf(tableModel.getValueAt(i, 1)));
                double pricePerQuantity = Double.parseDouble(String.valueOf(tableModel.getValueAt(i, 2)));

                totalQuantity += quantity;
                totalAmount += quantity * pricePerQuantity;
            }
            psUpdate.setInt(1,totalQuantity);
            psUpdate.setDouble(2, totalAmount);
            psUpdate.setString(3, cashierEmail);
            
            int rsUpdate = psUpdate.executeUpdate();
            System.out.println("Updated successfully");
                
            }else{
                Class.forName("com.mysql.cj.jdbc.Driver");
           // Connection con2 = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps2 = con.prepareStatement("insert into cashier_performance values (?,?,?,?)");
            
            //get quantity and price
            for (int i = 0; i < rowCount; i++) {
                int quantity = Integer.parseInt(String.valueOf(tableModel.getValueAt(i, 1)));
                double pricePerQuantity = Double.parseDouble(String.valueOf(tableModel.getValueAt(i, 2)));

                totalQuantity += quantity;
                totalAmount += quantity * pricePerQuantity;
            }
            ps2.setString(1, cashierEmail);
            ps2.setString(2, firstName+" "+lastName );
            ps2.setInt(3, totalQuantity);
            ps2.setDouble(4, totalAmount);
            
            
            
            int rs2 = ps2.executeUpdate();
            System.out.println("Inserted successfully");
            }
            
        }catch(Exception e){
            System.out.println("Error: " + e);
        }   
   }
   
   private boolean checkForCashier(){
       int itemCount=0;
       try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps = con.prepareStatement("SELECT COUNT(*) AS cashier_present FROM cashier_performance WHERE cashier_email = ?"); 
            ps.setString(1, cashierEmail);
            ResultSet rs = ps.executeQuery();
            
            // Retrieve the count from the ResultSet
            //int itemCount = 0; // Initialize with a default value
            if (rs.next()) {
                itemCount = rs.getInt("cashier_present");
            }
            System.out.println("cashier Present: " + itemCount);
            
            
       }catch(Exception e){
           System.out.println("Error: "+e);
       }
       if(itemCount>0){
                return true;
            }else{
                return false;
            }
   }
   private boolean checkForProducts(String productName){
       int itemCount=0;
       try{
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/pau_pos","root","root")    ;
            System.out.println("Connected");
            PreparedStatement ps = con.prepareStatement("SELECT COUNT(*) AS cashier_present FROM product_performance WHERE product_name = ?"); 
            ps.setString(1, productName);
            ResultSet rs = ps.executeQuery();
            
            // Retrieve the count from the ResultSet
            //int itemCount = 0; // Initialize with a default value
            if (rs.next()) {
                itemCount = rs.getInt("cashier_present");
            }
            System.out.println("No of Product Present: " + itemCount);
            
            
       }catch(Exception e){
           System.out.println("Error: "+e);
       }
       if(itemCount>0){
                return true;
            }else{
                return false;
            }
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Checkout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Checkout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Checkout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Checkout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Checkout(tableModel,totalAmount,cashierEmail).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
